<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://carmanzheng.github.io//</id><title>Technical Blogs</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-07-08T16:45:46+08:00</updated> <author> <name>carmanzheng</name> <uri>https://carmanzheng.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://carmanzheng.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://carmanzheng.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 carmanzheng </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Kubernetes</title><link href="https://carmanzheng.github.io//posts/Kubernetes%E6%A6%82%E8%BF%B0/" rel="alternate" type="text/html" title="Kubernetes" /><published>2022-02-17T00:00:00+08:00</published> <updated>2022-07-08T16:41:16+08:00</updated> <id>https://carmanzheng.github.io//posts/Kubernetes%E6%A6%82%E8%BF%B0/</id> <content src="https://carmanzheng.github.io//posts/Kubernetes%E6%A6%82%E8%BF%B0/" /> <author> <name>carmanzheng</name> </author> <category term="边缘计算" /> <summary> ​ K8s是谷歌在2014年开源的容器化集群管理系统，使用k8s进行容器化应用部署。k8s利于应用的扩展，让容器化应用更加简洁高效。 1.自动装箱 ​ 基于容器对应用运行环境的资源配置要求，自动部署应用容器 2.自我修复 ​ 当容器失败时，会对容器进行重启 ​ 当所部署的Node节点有问题时，会对容器进行重新部署和重新调度 ​ 当容器未通过监控检查时，会关闭此容器；直到容器正常运行时，才对外提供服务 3.水平扩展 ​ 通过简单的命令、用户UI界面或基于CPU等资源的使用情况，对应用容器进行规模化扩大或规模剪裁 4.滚动更新 ​ 可以根据应用的变化，对运行的应用进行一次性或者批量式更新 5.版本回退 ​ 根据应用部署情况，进行历史版本的即时回退 6.秘钥和配置管理 ​ 在不需要重新构建镜像的情况下，可以部署和更新秘钥和应用配置，类似热部署 7.存储编排 ... </summary> </entry> <entry><title>Docker-Compose</title><link href="https://carmanzheng.github.io//posts/Docker-Compose-%E7%A9%BA/" rel="alternate" type="text/html" title="Docker-Compose" /><published>2022-02-16T00:00:00+08:00</published> <updated>2022-03-09T21:34:20+08:00</updated> <id>https://carmanzheng.github.io//posts/Docker-Compose-%E7%A9%BA/</id> <content src="https://carmanzheng.github.io//posts/Docker-Compose-%E7%A9%BA/" /> <author> <name>carmanzheng</name> </author> <category term="边缘计算" /> <summary> 1. Docker Compose简介 ​ Docker Compose是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。 ​ Docker Compose 通过一个配置文件（yml文件）来管理多个Docker容器，在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。 原文链接：https://blog.csdn.net/pushiqiang/article/details/78682323 版本需求 Compose file format Docker Engine r... </summary> </entry> <entry><title>Docker基础</title><link href="https://carmanzheng.github.io//posts/docker%E5%9F%BA%E7%A1%80/" rel="alternate" type="text/html" title="Docker基础" /><published>2022-02-15T00:00:00+08:00</published> <updated>2022-05-20T10:52:14+08:00</updated> <id>https://carmanzheng.github.io//posts/docker%E5%9F%BA%E7%A1%80/</id> <content src="https://carmanzheng.github.io//posts/docker%E5%9F%BA%E7%A1%80/" /> <author> <name>carmanzheng</name> </author> <category term="边缘计算" /> <summary> 本文主要对docker的基础知识进行介绍，了解docker的镜像、容器和仓库。 1.镜像 docker的镜像实由一层一层的文件系统组成，这种层级的文件系统采用联合文件系统编写（UnionFS)，优点：共享资源。 即有多个镜像从相同的base镜像构建而来，那么宿主机上只需要在磁盘上保存一份base镜像，同时内存中只需要加载一份base镜像，就可以为所有容器提供服务了，且镜像的每一层都能被共享。 bootfs(boot files system) ​ 主要包含bootloader和kernel，bootloader主要是引导加载kernel。Linux刚启动会加载bootfs文件系统，在docker镜像的最底层就是bootfs。这一层与典型的Linux/Unix系统一样的，包含boot加载器和内核。当boot加载完成后，整个内核就在内存当中，此时内存的使用权由bootfs转交... </summary> </entry> <entry><title>Nginx</title><link href="https://carmanzheng.github.io//posts/Nginx/" rel="alternate" type="text/html" title="Nginx" /><published>2022-01-24T00:00:00+08:00</published> <updated>2022-03-07T10:11:56+08:00</updated> <id>https://carmanzheng.github.io//posts/Nginx/</id> <content src="https://carmanzheng.github.io//posts/Nginx/" /> <author> <name>carmanzheng</name> </author> <category term="IT" /> <summary> 本文主要介绍Nginx内容，Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。 它不仅是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP/POP3/SMTP 代理服务器。 1. 简单应用 一般会在docker中拉取镜像，后运行nginx就能看到服务 # 1. 拉取镜像 docker pull nginx # 2. 运行nginx docker run -d -p 80:80 nginx # 3.访问本地 https://localhost:80 2. 部署vue项目 本小节介绍简单的部署，即能够运行页面即可 1.打包移植 ... </summary> </entry> <entry><title>Github中的SSH</title><link href="https://carmanzheng.github.io//posts/Github%E7%9A%84ssh/" rel="alternate" type="text/html" title="Github中的SSH" /><published>2022-01-23T00:00:00+08:00</published> <updated>2022-01-23T00:00:00+08:00</updated> <id>https://carmanzheng.github.io//posts/Github%E7%9A%84ssh/</id> <content src="https://carmanzheng.github.io//posts/Github%E7%9A%84ssh/" /> <author> <name>carmanzheng</name> </author> <category term="IT" /> <summary> 本文主要介绍配置多个ssh的案例 同时配置github和gitee远程仓库，命令执行窗口为git； # windows用户使用右键文件夹，git bash here step 1 设置全局用户名和用户邮箱，这个就是本地的用户信息 命令如下 git config --global user.name "这里换上你的用户名" git config --global user.email "这里换上你的邮箱" step 2 生成本地私钥和公钥 # 单个文件生成，没必要配置文件名，使用这个 ssh-keygen -t rsa -C "这里换上你的邮箱" # 本案例配置多个，所以要使用文件名 ssh-keygen -t rsa -C "这里换上你gitee注册的邮箱" -f ~/.ssh/gitee_id ssh-keygen -t rsa -C "这里换上你github注... </summary> </entry> </feed>
